# -*- coding: utf-8 -*-
"""HAC(Single_Linkage)Fix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1So-wgECzCgDaTXI-sDlQndlMLKkPU1W4
"""

# Import library yang diperlukan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from google.colab import files
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.cluster.hierarchy import linkage, fcluster, dendrogram

# Mengunggah file CSV
uploaded = files.upload()

# Memuat dataset dari file yang diunggah
data = pd.read_csv(next(iter(uploaded.keys())))

# Memuat dataset
data = pd.read_csv('tokopedia dataset 1.csv', sep=';')

# Menampilkan informasi data
print("Informasi dataset:")
print(data.info())

# Memilih fitur yang relevan untuk clustering
data_features = data[['Price', 'Number Sold', 'Total Review']].fillna(data[['Price', 'Number Sold', 'Total Review']].median())

# Menangani missing values dengan mengisi menggunakan median
data_features = data_features.fillna(data_features.median())

# Standarisasi data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data_features)

# Menghitung clustering dengan 4 cluster
clustering = AgglomerativeClustering(n_clusters=4, linkage='average')
clusters = clustering.fit_predict(data_features)

# Menambahkan kolom 'Cluster' pada data untuk analisis
data['Cluster'] = clusters

# Normalisasi nilai cluster agar dimulai dari 1
data['Cluster'] = data['Cluster'] - data['Cluster'].min() + 1

# Menampilkan kategori untuk setiap cluster setelah normalisasi
print("\nKategori untuk setiap cluster:")
for cluster in sorted(data['Cluster'].unique()):  # Gunakan nilai unik yang sudah dinormalisasi
    example_categories = data[data['Cluster'] == cluster]['Category'].unique()
    print(f"Cluster {cluster}: {example_categories}")

# Membuat heatmap korelasi
plt.figure(figsize=(8, 6))
correlation_matrix = data_features.corr()  # Gunakan 'features' di sini
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap features')
plt.show()

# Inisialisasi list untuk menyimpan inertia
inertia = []
k_range = range(1, 11)  # Menguji untuk 1 hingga 10 cluster

# Menerapkan Agglomerative Clustering untuk berbagai jumlah cluster
for k in k_range:
    hac = AgglomerativeClustering(n_clusters=k, linkage='single')
    hac.fit(data_features)

    # Menghitung linkage matrix
    linkage_matrix_k = linkage(data_features, method='single')

    # Menghitung pseudo-inertia dengan mengambil jarak antar cluster terakhir
    inertia.append(sum(linkage_matrix_k[:, 2][-k:]))

# Membuat grafik Elbow Curve
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, marker='o')
plt.title('Metode Elbow untuk HAC (Single Linkage)')
plt.xlabel('Jumlah Cluster (k)')
plt.ylabel('Pseudo-Inertia')
plt.xticks(k_range)
plt.grid()
plt.show()

#Menghitung Silhouette Score untuk 4 cluster
silhouette_avg = silhouette_score(data_features, clusters)

# Menampilkan Silhouette Score
print(f'Silhouette Score untuk 4 Cluster: {silhouette_avg}')

# Menambahkan kolom Cluster ke dataset asli
data['features'] = clusters

# Membuat visualisasi per kategori untuk hasil clustering dengan PCA
categories = data['Category'].unique()  # Mendapatkan semua kategori yang ada

# Scatter plot untuk setiap kategori
for category in categories:
    # Filter data berdasarkan kategori
    category_data = data[data['Category'] == category]

# Menambahkan label cluster ke dataset
data['Cluster'] = hac.labels_

# Mendefinisikan daftar fitur yang relevan
features_list = ['Price', 'Number Sold', 'Total Review']

# Mengatur ulang label cluster ke urutan dari Cluster 1 hingga Cluster 4
clusters_sorted = [x+1 for x in clusters]  # Menambahkan 1 agar mulai dari Cluster 1, bukan 0

# Mengurangi dimensi data menggunakan PCA menjadi 2 komponen
pca = PCA(n_components=2)
pca_components = pca.fit_transform(data_features)

# Membuat DataFrame untuk hasil PCA dan cluster
pca_df = pd.DataFrame(data=pca_components, columns=['PCA1', 'PCA2'])
pca_df['Cluster'] = clusters_sorted

# Membuat visualisasi hasil clustering dengan PCA
plt.figure(figsize=(8, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=pca_df, palette='Set2', s=100, marker='o', edgecolor='black')
plt.title('PCA visualization')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.legend(title='Cluster', loc='best')
plt.grid(True)
plt.show()

# Mengelompokkan kategori berdasarkan cluster
cluster_categories = data.groupby('Cluster')['Category'].apply(list)

# Membuat scatter plot Number Sold vs Price, dengan warna berdasarkan kategori
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Price', y='Number Sold', hue='Category', data=data, palette='Set2', s=100, marker='o', edgecolor='black')

# Menambahkan label dan judul
plt.title('Number Sold vs Price (2D Visualization)')
plt.xlabel('Price')
plt.ylabel('Number Sold')

# Menampilkan legend
plt.legend(title='Category', loc='best', bbox_to_anchor=(1, 1), fontsize=9)

# Menampilkan grid
plt.grid(True)

# Menampilkan plot
plt.tight_layout()
plt.show()

# Membuat scatter plot Number Sold vs Total Review, dengan warna berdasarkan kategori
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Total Review', y='Number Sold', hue='Category', data=data, palette='Set2', s=100, marker='o', edgecolor='black')

# Menambahkan label dan judul
plt.title('Number Sold vs Total Review (2D Visualization)')
plt.xlabel('Total Review')
plt.ylabel('Number Sold')

# Menampilkan legend
plt.legend(title='Category', loc='best', bbox_to_anchor=(1, 1), fontsize=9)

# Menampilkan grid
plt.grid(True)

# Menampilkan plot
plt.tight_layout()
plt.show()

# Menghitung rata-rata untuk 'Number Sold', 'Price', dan 'Total Review' per kategori
avg_data = data.groupby('Category')[['Number Sold', 'Price', 'Total Review']].mean()

# Membuat subplots untuk tiga bar chart terpisah
fig, axes = plt.subplots(3, 1, figsize=(12, 18))

# Bar chart untuk rata-rata 'Number Sold' per kategori
avg_data['Number Sold'].plot(kind='bar', ax=axes[0], color='lightblue', edgecolor='black')
axes[0].set_title('Single Number Sold by Category')
axes[0].set_xlabel('Category')
axes[0].set_ylabel('Single Number Sold')
axes[0].grid(True)

# Bar chart untuk rata-rata 'Price' per kategori
avg_data['Price'].plot(kind='bar', ax=axes[1], color='lightgreen', edgecolor='black')
axes[1].set_title('Single Price by Category')
axes[1].set_xlabel('Category')
axes[1].set_ylabel('Single Price')
axes[1].grid(True)

# Bar chart untuk rata-rata 'Total Review' per kategori
avg_data['Total Review'].plot(kind='bar', ax=axes[2], color='salmon', edgecolor='black')
axes[2].set_title('Single Total Review by Category')
axes[2].set_xlabel('Category')
axes[2].set_ylabel('Single Total Review')
axes[2].grid(True)

# Menampilkan plot
plt.tight_layout()
plt.show()

# Menghitung linkage matrix menggunakan metode 'single'
linkage_matrix = linkage(scaled_data, method='single')

# Menentukan jumlah cluster yang diinginkan (4 cluster)
cluster_labels = fcluster(linkage_matrix, t=4, criterion='maxclust')

# Menentukan threshold yang lebih tinggi untuk pemotongan lebih jelas
threshold = 3  # Sesuaikan threshold lebih tinggi untuk pemotongan yang lebih jelas

# Membuat dendrogram dengan warna yang berbeda untuk setiap cluster
plt.figure(figsize=(10, 9))
dendrogram(linkage_matrix, color_threshold=threshold)  # Gunakan threshold untuk pewarnaan otomatis

# Menambahkan garis horizontal di threshold untuk pemotongan
plt.axhline(y=threshold, color='r', linestyle='--', label=f'Threshold = {threshold}')

# Menambahkan judul dan label
plt.title('Dendrogram dengan Threshold untuk Agglomerative Clustering (Single Linkage)', fontsize=14)
plt.xlabel('Index Data', fontsize=12)
plt.ylabel('Jarak', fontsize=12)

# Menampilkan legenda
plt.legend()

# Menampilkan plot
plt.show()

import joblib
# Simpan model (linkage matrix dan scaler)
model_data = {
    "linkage_matrix": linkage_matrix,
    "scaler": scaler
}
joblib.dump(model_data, "hac_model.pkl")

print("Model HAC berhasil disimpan sebagai 'hac_model.pkl'")